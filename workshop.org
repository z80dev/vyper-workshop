#+title: Vyper Workshop

welcome to ETH Denver. hack and make some friends :)

* Who is z80
interests: lisp, vyper, compilers, NFTs, defi, ZK
* What is Vyper?
Vyper is a pythonic smart contract language for the EVM. Think of it as a replacement for Solidity. If you know basic Python, you know most of Vyper.
* Why Vyper?
** Simplicity
** Security
** Auditability
** Gas efficiency
* Major Differences from Solidity
- Pythonic Syntax
- Code-sharing via modules (composition vs. inheritance)
- Stricter requirements around dynamic-length arrays
- Explicit marking of external calls
* Gas Efficiency
** Smaller bytecode output (cheaper deployment)
** Smarter bytecode generation (cheaper usage)
* Libraries
** Snekmate is really all you need
By the one and only pcaversaccio. Vyper's equivalent to OpenZeppelin/Solmate/Solady
* Tooling
** ApeWorx (Ape)
Pythonic framework for smart contract development. Think of it like Hardhat/Foundry, in Python.
** Titanoboa
A "vyper interpreter" of sorts. Great tool for rapid iteration, testing, and more.
** Foundry
Foundry support for Vyper is pretty good now! With some limitations, can feel similar to working with Solidity.
* Example 1: Counter
#+NAME: Counter.vy
#+BEGIN_SRC vyper
# pragma version ^0.4.0
count: public(uint256)

@deploy
def __init__(start_value: uint256):
    self.count = start_value

@external
def increment():
    self.count += 1

@external
def decrement():
    self.count -= 1
#+END_SRC
* Explicit external calls
Vyper 0.4.0 introduced marking external calls with `extcall` or `staticcall` depending on the type of call. This is meant to improve security and auditability.
** extcall
Used for calls that can change state
** staticcall
Used for calls to external view functions, i.e. cannot change state
* Example 2: NameManager
#+BEGIN_SRC vyper
interface INameHaver:
    def name() -> String[30]: view
    def set_name(name: String[30]) -> bool: nonpayable

@external
def check_name(target: address) -> String[30]:
    name: String[30] = staticcall INameHaver(target).name()
    return name

@external
def set_name(target: address, name: String[30]):
    assert extcall INameHaver(target).set_name(name) # assert useful b.c. of bool return
    return

#+END_SRC
